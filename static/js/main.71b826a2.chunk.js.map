{"version":3,"sources":["components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["Filter","filter","handleFilter","filterInputId","shortid","generate","htmlFor","id","type","name","value","pattern","title","onChange","ContactForm","addContact","useState","setName","number","setNumber","nameInputId","useRef","numberInputId","onSubmit","e","preventDefault","required","currentTarget","ContactList","contacts","handleDelete","obj","toLowerCase","includes","map","onClick","App","setContacts","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","find","contact","alert","prevState","contactId","reduce","acc","el","push","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA2BeA,MAxBf,YAA2C,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aAClBC,EAAgBC,IAAQC,WAE9B,OACE,gCACE,uBAAOC,QAASH,EAAhB,mCACA,uBACEI,GAAIJ,EACJK,KAAK,OACLC,KAAK,SACLC,MAAOT,EACPU,QAAQ,yHACRC,MAAM,qcACNC,SAAUX,QCsCHY,MAlDf,YAAsC,IAAfC,EAAc,EAAdA,WACrB,EAAwBC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACMC,EAAcC,iBAAOjB,IAAQC,YAC7BiB,EAAgBD,iBAAOjB,IAAQC,YASrC,OACE,uBAAMkB,SARa,SAACC,GACpBA,EAAEC,iBACFV,EAAWN,EAAMS,GACjBD,EAAQ,IACRE,EAAU,KAIV,UACE,uBAAOb,QAASc,EAAhB,kBACA,uBACEb,GAAIa,EACJZ,KAAK,OACLC,KAAK,OACLC,MAAOD,EACPE,QAAQ,yHACRC,MAAM,qcACNc,UAAQ,EACRb,SAAU,SAACW,GACTP,EAAQO,EAAEG,cAAcjB,UAG5B,uBAAOJ,QAASgB,EAAhB,oBACA,uBACEf,GAAIe,EACJd,KAAK,MACLC,KAAK,SACLC,MAAOQ,EACPP,QAAQ,yFACRC,MAAM,giBACNc,UAAQ,EACRb,SAAU,SAACW,GACTL,EAAUK,EAAEG,cAAcjB,UAG9B,wBAAQF,KAAK,SAAb,6BCdSoB,MA7Bf,YAA0D,IAAnCC,EAAkC,EAAlCA,SAAU5B,EAAwB,EAAxBA,OAAQ6B,EAAgB,EAAhBA,aACvC,OACE,8BACGD,EACE5B,QAAO,SAAC8B,GAAD,OAASA,EAAItB,KAAKuB,cAAcC,SAAShC,EAAO+B,kBACvDE,KAAI,SAACV,GAAD,OACH,8BACGA,EAAEf,KADL,KACae,EAAEN,OACb,wBACEV,KAAK,SACL,UAASgB,EAAEjB,GACX4B,QAAS,WACPL,EAAaN,EAAEjB,KAJnB,sBAFMiB,EAAEjB,UCyDL6B,MA3Df,WACE,MAAgCpB,mBAAS,IAAzC,mBAAOa,EAAP,KAAiBQ,EAAjB,KACA,EAA4BrB,mBAAS,IAArC,mBAAOf,EAAP,KAAeqC,EAAf,KAuCA,OArCAC,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aACnDJ,GACFH,EAAYG,KAEb,IAEHD,qBAAU,WACHV,GAGLc,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUjB,MAC/C,CAACA,IA0BF,gCACE,2CACA,cAAC,EAAD,CAAad,WA1BE,SAACN,EAAMS,GACpBW,EAASkB,MAAK,SAACC,GAAD,OAAaA,EAAQvC,OAASA,KAC9CwC,MAAM,GAAD,OAAIxC,EAAJ,8BAIP4B,GAAY,SAACa,GAAD,4BACPA,GADO,CAEV,CAAE3C,GAAIH,IAAQC,WAAYI,KAAMA,EAAMS,OAAQA,WAmB9C,0CACA,cAAC,EAAD,CACEjB,OAAQA,EACRC,aAAc,SAACsB,GAAD,OAAOc,EAAUd,EAAEG,cAAcjB,UAEjD,cAAC,EAAD,CACEmB,SAAUA,EACV5B,OAAQA,EACR6B,aAvBe,SAACqB,GACpBd,EACER,EAASuB,QAAO,SAACC,EAAKC,GAIpB,OAHIA,EAAG/C,KAAO4C,GACZE,EAAIE,KAAKD,GAEJD,IACN,YCtCTG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.71b826a2.chunk.js","sourcesContent":["import shortid from \"shortid\";\nimport propTypes from \"prop-types\";\n\nfunction Filter({ filter, handleFilter }) {\n  const filterInputId = shortid.generate();\n\n  return (\n    <div>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\n        onChange={handleFilter}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: propTypes.string,\n  handleFilter: propTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport propTypes from \"prop-types\";\n\nfunction ContactForm({ addContact }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const nameInputId = useRef(shortid.generate());\n  const numberInputId = useRef(shortid.generate());\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addContact(name, number);\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\n        required\n        onChange={(e) => {\n          setName(e.currentTarget.value);\n        }}\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={(e) => {\n          setNumber(e.currentTarget.value);\n        }}\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  addContact: propTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import propTypes from \"prop-types\";\n\nfunction ContactList({ contacts, filter, handleDelete }) {\n  return (\n    <div>\n      {contacts\n        .filter((obj) => obj.name.toLowerCase().includes(filter.toLowerCase()))\n        .map((e) => (\n          <p key={e.id}>\n            {e.name}: {e.number}\n            <button\n              type=\"button\"\n              data-id={e.id}\n              onClick={() => {\n                handleDelete(e.id);\n              }}\n            >\n              Delete\n            </button>\n          </p>\n        ))}\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contacts: propTypes.array.isRequired,\n  filter: propTypes.string.isRequired,\n  handleDelete: propTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!contacts) {\n      return;\n    }\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is alrteady in contacts.`);\n      return;\n    }\n\n    setContacts((prevState) => [\n      ...prevState,\n      { id: shortid.generate(), name: name, number: number },\n    ]);\n  };\n\n  const handleDelete = (contactId) => {\n    setContacts(\n      contacts.reduce((acc, el) => {\n        if (el.id !== contactId) {\n          acc.push(el);\n        }\n        return acc;\n      }, [])\n    );\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm addContact={addContact} />\n      <h2>Contacts</h2>\n      <Filter\n        filter={filter}\n        handleFilter={(e) => setFilter(e.currentTarget.value)}\n      />\n      <ContactList\n        contacts={contacts}\n        filter={filter}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}